package it.unibo.tuprolog.core

import org.gciatto.kt.math.BigDecimal
import kotlin.collections.List

class TestReal : BaseTestNumeric() {

    override val numbersUnderTestAsStrings: List<String> = listOf(
            "0.0",
            "1.0",
            "2.0",
            "2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264",
            "3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648",
            "0.5",
            "0.1",
            "0.000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
            "-1.0",
            "-2.0",
            "-2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264",
            "-3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648",
            "-0.5",
            "-0.1",
            "-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
            Float.MAX_VALUE.toString(),
            Float.MIN_VALUE.toString(),
            Double.MAX_VALUE.toString(),
            Double.MIN_VALUE.toString(),
            "-" + Float.MAX_VALUE.toString(),
            "-" + Float.MIN_VALUE.toString(),
            "-" + Double.MAX_VALUE.toString(),
            "-" + Double.MIN_VALUE.toString()
    )

    val numbersUnderTestAsBigDecimals: List<BigDecimal> = listOf(
            BigDecimal.ZERO,
            BigDecimal.ONE,
            BigDecimal.of(2.0),
            BigDecimal.E,
            BigDecimal.PI,
            BigDecimal.ONE_HALF,
            BigDecimal.ONE_TENTH,
            BigDecimal.of("0.000000000000000000000000000000000000000000000000000000000000000000000000000000000001"),
            -BigDecimal.ONE,
            -BigDecimal.of(2.0),
            -BigDecimal.E,
            -BigDecimal.PI,
            -BigDecimal.ONE_HALF,
            -BigDecimal.ONE_TENTH,
            -BigDecimal.of("0.000000000000000000000000000000000000000000000000000000000000000000000000000000000001"),
            BigDecimal.of(Float.MAX_VALUE.toString()),
            BigDecimal.of(Float.MIN_VALUE.toString()),
            BigDecimal.of(Double.MAX_VALUE.toString()),
            BigDecimal.of(Double.MIN_VALUE.toString()),
            -BigDecimal.of(Float.MAX_VALUE.toString()),
            -BigDecimal.of(Float.MIN_VALUE.toString()),
            -BigDecimal.of(Double.MAX_VALUE.toString()),
            -BigDecimal.of(Double.MIN_VALUE.toString())
    )

    override val numbersUnderTestValues: List<Any> =  numbersUnderTestAsBigDecimals.asSequence()
            .map { it }
            .toList()

}